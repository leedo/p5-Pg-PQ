#!/usr/bin/perl

use strict;
use warnings;

open E, "< enums.h" or die "unable to open enums.h";
open O, "> enums.c" or die "unable to open enums.c";

my %enum;
my $c;
my $last = 0;
while(<E>) {
    s|/\*.*/||;
    s|^\s\* .*||;
    s|^.*\*/||;
    if (my ($name) = /^enum\s*(\w+)\s*/) {
        $last = 0;
	# $name =~ s/^ldap_//;
	$c = $enum{$name} = [];
    }
    elsif (/^\s*((?:P[QG]|CONN)\w+)\s*=\s*(\d+),/) {
        $c->[$2] = $1;

        $last = $2 + 1;
    }
    elsif (/^\s*((?:P[QG]|CONN)\w+)\s*,/) {
        $c->[$last++] = $1;
    }
}

print O <<HEAD;
/*
 *
 * This file is generated by gen_constants.pl
 * Do not edit by hand!
 *
 */

HEAD

for my $enum (sort keys %enum) {
    my $len = @{$enum{$enum}};
    print O "SV *enum2sv_${enum}[$len];\n";
}

# print O <<DECL for @c;
# SV *${_}_sv;
# DECL

print O <<INIT;

static void
init_constants(void) {
INIT

for my $enum (sort keys %enum) {
    my $c = $enum{$enum};
    for my $ix (0..$#$c) {
	my $name = $c->[$ix];
	my $value;
	if (defined $name) {
	    $value = $name;
            unless (defined $c->[0]) {
                $c->[0] = "$value - $ix"
            }
	}
	else {
	    $name = uc "${enum}_$ix";
	    $value = $ix;
	}

	printf O <<C, $ix, $name, length($name), $value;
    enum2sv_${enum}[%d] = make_constant("%s", %d, %s);
C

    }
    print O "\n";
}

print O <<END;
}
END

for my $enum (sort keys %enum) {
    my $len = @{$enum{$enum}};
    print O <<ETS;
static SV *
${enum}2sv(I32 ix) {
    SV *sv;
    ix -= $enum{$enum}[0];
    if ((ix < 0) || (ix >= $len)) {
        return newSViv(ix);
    }
    sv = newSVsv(enum2sv_${enum}[ix]);
    return sv;
}

ETS
}
